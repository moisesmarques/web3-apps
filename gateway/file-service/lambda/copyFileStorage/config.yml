copyFileStorage:
  handler: lambda/copyFileStorage/index.handler
  description: "Allows user copy file based on its fileId"
  events:
    - httpApi:
        path: /wallets/{walletId}/storage/{fileId}/copy
        method: post
        authorizer:
          type: request
          id: !ImportValue NearGatewayAuthorizerId
#    - http:
#        path: /wallets/{walletId}/files/{fileId}/copy
#        method: post
#        authorizer:
#          name: ${self:service}-JWTAuthorizer
#          type: request
#          arn: ${ssm:/rest-service/lambda/JwtAuthorizer/arn}
  environment:
    # Avoid using Ref here as this may create a Circular dependency between resources https://go.aws/3pk3Nup
    BUCKET_NAME_FILES: ${self:custom.file-service.s3.storage.name}
    TABLE_NAME_FILES: ${self:custom.file-service.dynamodb.files.name}
    ## TODO: use ${ssm:/dynamodb/wallet-service/wallets/name} when exported by Terraform
    TABLE_NAME_WALLETS: near-wallets
    CLOUDFRONT_SECRET_NAME: ${self:custom.file-service.cloudfront.secret-name}
    CLOUDFRONT_URL: ${self:custom.cdn.url.${self:provider.stage}}
  iamRoleStatementsInherit: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
      Resource:
        ## TODO: use ${ssm:/dynamodb/wallet-service/wallets/arn} when exported by Terraform
        - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/near-wallets
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:UpdateItem
      Resource:
        - ${self:custom.file-service.dynamodb.files.arn}
    - Effect: Allow
      Action:
        - s3:*
      Resource:
        - ${self:custom.file-service.s3.storage.arn}/*
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource:
        - arn:aws:secretsmanager:${aws:region}:${aws:accountId}:secret:/storage-service/cloudfront/signers*
